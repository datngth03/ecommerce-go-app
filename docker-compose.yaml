version: "3.8"

services:
   # ================================
   # Infrastructure Services
   # ================================

   # PostgreSQL Database
   postgres:
      image: postgres:15-alpine
      container_name: ecommerce-postgres
      restart: unless-stopped
      environment:
         POSTGRES_DB: ecommerce
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres123
      ports:
         - "5432:5432"
      volumes:
         - postgres_data:/var/lib/postgresql/data
         - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD-SHELL", "pg_isready -U postgres"]
         interval: 10s
         timeout: 5s
         retries: 5

   # Redis Cache
   redis:
      image: redis:7-alpine
      container_name: ecommerce-redis
      restart: unless-stopped
      ports:
         - "6379:6379"
      volumes:
         - redis_data:/data
         - ./infrastructure/docker/redis/redis.conf:/etc/redis/redis.conf
      command: redis-server /etc/redis/redis.conf
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "redis-cli", "ping"]
         interval: 10s
         timeout: 5s
         retries: 3

   # RabbitMQ Message Queue
   rabbitmq:
      image: rabbitmq:3-management-alpine
      container_name: ecommerce-rabbitmq
      restart: unless-stopped
      environment:
         RABBITMQ_DEFAULT_USER: admin
         RABBITMQ_DEFAULT_PASS: admin123
      ports:
         - "5672:5672"
         - "15672:15672" # Management UI
      volumes:
         - rabbitmq_data:/var/lib/rabbitmq
      networks:
         - ecommerce-network
      healthcheck:
         test: rabbitmq-diagnostics -q ping
         interval: 30s
         timeout: 30s
         retries: 3

   # ================================
   # Microservices
   # ================================

   # API Gateway
   api-gateway:
      build:
         context: ./services/api-gateway
         dockerfile: Dockerfile
      container_name: ecommerce-api-gateway
      restart: unless-stopped
      ports:
         - "8000:8000" # Main HTTP Gateway Port
      environment:
         # Service Info
         - SERVICE_NAME=api-gateway
         - SERVICE_VERSION=1.0.0
         - ENVIRONMENT=production

         # Server
         - HTTP_PORT=8000
         - SERVER_HOST=0.0.0.0
         - GIN_MODE=release

         # Services - gRPC Addresses (Internal Communication)
         - USER_SERVICE_GRPC_ADDR=user-service:9001
         - PRODUCT_SERVICE_GRPC_ADDR=product-service:9002
         - ORDER_SERVICE_GRPC_ADDR=order-service:9003
         - NOTIFICATION_SERVICE_GRPC_ADDR=notification-service:9004
         - INVENTORY_SERVICE_GRPC_ADDR=inventory-service:9005
         - PAYMENT_SERVICE_GRPC_ADDR=payment-service:9006

         # Timeouts
         - SERVICE_TIMEOUT=30s
         - GRPC_DIAL_TIMEOUT=5s

         # Auth & JWT
         - JWT_SECRET=your-super-secret-jwt-key-change-in-production-2025
         - JWT_EXPIRATION_HOURS=24
         - REFRESH_TOKEN_EXPIRATION_DAYS=7
         - ENABLE_AUTH=true

         # Rate Limiting
         - RATE_LIMIT_ENABLED=true
         - RATE_LIMIT_REQUESTS_PER_MIN=100
         - RATE_LIMIT_BURST_SIZE=50

         # CORS
         - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
         - CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,PATCH,OPTIONS
         - CORS_ALLOWED_HEADERS=Origin,Content-Type,Authorization

         # Logging
         - LOG_LEVEL=info
         - LOG_FORMAT=json

      depends_on:
         - user-service
         - product-service
         - order-service
         - inventory-service
         - payment-service
         - notification-service
      networks:
         - ecommerce-network
      healthcheck:
         test:
            [
               "CMD",
               "wget",
               "--no-verbose",
               "--tries=1",
               "--spider",
               "http://localhost:8000/health",
            ]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   # User Service
   user-service:
      build:
         context: .
         dockerfile: services/user-service/Dockerfile
      container_name: ecommerce-user-service
      restart: unless-stopped
      ports:
         - "8001:8001" # HTTP Port
         - "9001:9001" # gRPC Port
      environment:
         # Service Info
         - SERVICE_NAME=user-service
         - SERVICE_VERSION=1.0.0
         - ENVIRONMENT=production

         # Server Config
         - HTTP_PORT=8001
         - GRPC_PORT=9001

         # Database
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=users_db
         - DB_SSLMODE=disable
         - DB_MAX_OPEN_CONNS=25
         - DB_MAX_IDLE_CONNS=5

         # Redis
         - REDIS_HOST=redis
         - REDIS_PORT=6379
         - REDIS_PASSWORD=
         - REDIS_DB=0

         # JWT
         - JWT_SECRET=your-super-secret-jwt-key-change-in-production-2025
         - JWT_EXPIRATION_HOURS=24
         - REFRESH_TOKEN_EXPIRATION_DAYS=7

         # Logging
         - LOG_LEVEL=info
         - LOG_FORMAT=json
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test:
            [
               "CMD",
               "wget",
               "--no-verbose",
               "--tries=1",
               "--spider",
               "http://localhost:8001/health",
            ]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   # Product Service
   product-service:
      build:
         context: .
         dockerfile: services/product-service/Dockerfile
      container_name: ecommerce-product-service
      restart: unless-stopped
      ports:
         - "8002:8002" # HTTP Port
         - "9002:9002" # gRPC Port
      environment:
         # Service Info
         - SERVICE_NAME=product-service
         - SERVICE_VERSION=1.0.0
         - ENVIRONMENT=production

         # Server Config
         - HTTP_PORT=8002
         - GRPC_PORT=9002

         # Database
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=products_db
         - DB_SSLMODE=disable
         - DB_MAX_OPEN_CONNS=25
         - DB_MAX_IDLE_CONNS=5

         # Redis
         - REDIS_HOST=redis
         - REDIS_PORT=6379
         - REDIS_PASSWORD=
         - REDIS_DB=1

         # Logging
         - LOG_LEVEL=info
         - LOG_FORMAT=json
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test:
            [
               "CMD",
               "wget",
               "--no-verbose",
               "--tries=1",
               "--spider",
               "http://localhost:8002/health",
            ]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   # Order Service
   order-service:
      build:
         context: .
         dockerfile: services/order-service/Dockerfile
      container_name: ecommerce-order-service
      restart: unless-stopped
      ports:
         - "8003:8003" # HTTP Port
         - "9003:9003" # gRPC Port
      environment:
         # Service Info
         - SERVICE_NAME=order-service
         - SERVICE_VERSION=1.0.0
         - ENVIRONMENT=production

         # Server Config
         - HTTP_PORT=8003
         - GRPC_PORT=9003

         # Database
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=orders_db
         - DB_SSLMODE=disable
         - DB_MAX_OPEN_CONNS=25
         - DB_MAX_IDLE_CONNS=5

         # Redis
         - REDIS_HOST=redis
         - REDIS_PORT=6379
         - REDIS_PASSWORD=
         - REDIS_DB=2

         # RabbitMQ
         - RABBITMQ_HOST=rabbitmq
         - RABBITMQ_PORT=5672
         - RABBITMQ_USER=admin
         - RABBITMQ_PASSWORD=admin123
         - RABBITMQ_VHOST=/

         # External Services (gRPC)
         - USER_SERVICE_GRPC_ADDR=user-service:9001
         - PRODUCT_SERVICE_GRPC_ADDR=product-service:9002
         - INVENTORY_SERVICE_GRPC_ADDR=inventory-service:9005
         - PAYMENT_SERVICE_GRPC_ADDR=payment-service:9006

         # Logging
         - LOG_LEVEL=info
         - LOG_FORMAT=json
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test:
            [
               "CMD",
               "wget",
               "--no-verbose",
               "--tries=1",
               "--spider",
               "http://localhost:8003/health",
            ]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   # Payment Service
   payment-service:
      build:
         context: .
         dockerfile: services/payment-service/Dockerfile
      container_name: ecommerce-payment-service
      restart: unless-stopped
      ports:
         - "8006:8006" # HTTP Port
         - "9006:9006" # gRPC Port
      environment:
         # Service Info
         - SERVICE_NAME=payment-service
         - SERVICE_VERSION=1.0.0
         - ENVIRONMENT=production

         # Server Config
         - HTTP_PORT=8006
         - GRPC_PORT=9006

         # Database
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=payments_db
         - DB_SSLMODE=disable
         - DB_MAX_OPEN_CONNS=25
         - DB_MAX_IDLE_CONNS=5

         # Redis
         - REDIS_HOST=redis
         - REDIS_PORT=6379
         - REDIS_PASSWORD=
         - REDIS_DB=3

         # RabbitMQ
         - RABBITMQ_HOST=rabbitmq
         - RABBITMQ_PORT=5672
         - RABBITMQ_USER=admin
         - RABBITMQ_PASSWORD=admin123
         - RABBITMQ_VHOST=/

         # Payment Gateways (Simulated for now)
         - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
         - STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
         - PAYPAL_CLIENT_ID=your_paypal_client_id
         - PAYPAL_SECRET=your_paypal_secret

         # Logging
         - LOG_LEVEL=info
         - LOG_FORMAT=json
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test:
            [
               "CMD",
               "wget",
               "--no-verbose",
               "--tries=1",
               "--spider",
               "http://localhost:8006/health",
            ]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   # Inventory Service
   inventory-service:
      build:
         context: .
         dockerfile: services/inventory-service/Dockerfile
      container_name: ecommerce-inventory-service
      restart: unless-stopped
      ports:
         - "8005:8005" # HTTP Port
         - "9005:9005" # gRPC Port
      environment:
         # Service Info
         - SERVICE_NAME=inventory-service
         - SERVICE_VERSION=1.0.0
         - ENVIRONMENT=production

         # Server Config
         - HTTP_PORT=8005
         - GRPC_PORT=9005

         # Database
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=inventory_db
         - DB_SSLMODE=disable
         - DB_MAX_OPEN_CONNS=25
         - DB_MAX_IDLE_CONNS=5

         # Redis
         - REDIS_HOST=redis
         - REDIS_PORT=6379
         - REDIS_PASSWORD=
         - REDIS_DB=4
         - REDIS_CACHE_TTL=300

         # RabbitMQ
         - RABBITMQ_HOST=rabbitmq
         - RABBITMQ_PORT=5672
         - RABBITMQ_USER=admin
         - RABBITMQ_PASSWORD=admin123
         - RABBITMQ_VHOST=/

         # Logging
         - LOG_LEVEL=info
         - LOG_FORMAT=json
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test:
            [
               "CMD",
               "wget",
               "--no-verbose",
               "--tries=1",
               "--spider",
               "http://localhost:8005/health",
            ]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   # Notification Service
   notification-service:
      build:
         context: .
         dockerfile: services/notification-service/Dockerfile
      container_name: ecommerce-notification-service
      restart: unless-stopped
      ports:
         - "8004:8004" # HTTP Port
         - "9004:9004" # gRPC Port
      environment:
         # Service Info
         - SERVICE_NAME=notification-service
         - SERVICE_VERSION=1.0.0
         - ENVIRONMENT=production

         # Server Config
         - HTTP_PORT=8004
         - GRPC_PORT=9004

         # Database
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=notifications_db
         - DB_SSLMODE=disable
         - DB_MAX_OPEN_CONNS=25
         - DB_MAX_IDLE_CONNS=5

         # RabbitMQ (for event-driven notifications)
         - RABBITMQ_HOST=rabbitmq
         - RABBITMQ_PORT=5672
         - RABBITMQ_USER=admin
         - RABBITMQ_PASSWORD=admin123
         - RABBITMQ_VHOST=/

         # Email/SMTP Configuration
         - SMTP_HOST=smtp.gmail.com
         - SMTP_PORT=587
         - SMTP_USER=your-email@gmail.com
         - SMTP_PASSWORD=your-app-password
         - SMTP_FROM_ADDRESS=noreply@ecommerce.com
         - SMTP_FROM_NAME=E-Commerce Platform

         # SMS/Twilio Configuration (Optional)
         - TWILIO_ACCOUNT_SID=your-twilio-account-sid
         - TWILIO_AUTH_TOKEN=your-twilio-auth-token
         - TWILIO_FROM_NUMBER=+1234567890

         # Logging
         - LOG_LEVEL=info
         - LOG_FORMAT=json
      depends_on:
         postgres:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test:
            [
               "CMD",
               "wget",
               "--no-verbose",
               "--tries=1",
               "--spider",
               "http://localhost:8004/health",
            ]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   # ================================
   # Monitoring & Observability
   # ================================

   # Prometheus
   prometheus:
      image: prom/prometheus:latest
      container_name: ecommerce-prometheus
      restart: unless-stopped
      ports:
         - "9090:9090"
      volumes:
         - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
         - prometheus_data:/prometheus
      command:
         - "--config.file=/etc/prometheus/prometheus.yml"
         - "--storage.tsdb.path=/prometheus"
         - "--web.console.libraries=/etc/prometheus/console_libraries"
         - "--web.console.templates=/etc/prometheus/consoles"
         - "--storage.tsdb.retention.time=200h"
         - "--web.enable-lifecycle"
      networks:
         - ecommerce-network

   # Grafana
   grafana:
      image: grafana/grafana:latest
      container_name: ecommerce-grafana
      restart: unless-stopped
      ports:
         - "3000:3000"
      environment:
         - GF_SECURITY_ADMIN_USER=admin
         - GF_SECURITY_ADMIN_PASSWORD=admin123
         - GF_USERS_ALLOW_SIGN_UP=false
      volumes:
         - grafana_data:/var/lib/grafana
         - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      depends_on:
         - prometheus
      networks:
         - ecommerce-network

   # Jaeger (Distributed Tracing)
   jaeger:
      image: jaegertracing/all-in-one:latest
      container_name: ecommerce-jaeger
      restart: unless-stopped
      ports:
         - "16686:16686"
         - "14268:14268"
      environment:
         - COLLECTOR_OTLP_ENABLED=true
      networks:
         - ecommerce-network

   # ================================
   # Load Balancer (Optional)
   # ================================

   # Nginx Load Balancer
   nginx:
      image: nginx:alpine
      container_name: ecommerce-nginx
      restart: unless-stopped
      ports:
         - "80:80"
         - "443:443"
      volumes:
         - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
         - ./infrastructure/docker/nginx/ssl:/etc/nginx/ssl
      depends_on:
         - api-gateway
      networks:
         - ecommerce-network

# ================================
# Networks & Volumes
# ================================

networks:
   ecommerce-network:
      driver: bridge

volumes:
   postgres_data:
      driver: local
   redis_data:
      driver: local
   rabbitmq_data:
      driver: local
   prometheus_data:
      driver: local
   grafana_data:
      driver: local
