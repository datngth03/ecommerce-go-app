version: "3.8"

services:
   # ================================
   # Infrastructure Services
   # ================================

   # PostgreSQL Database
   postgres:
      image: postgres:15-alpine
      container_name: ecommerce-postgres
      restart: unless-stopped
      environment:
         POSTGRES_DB: ecommerce
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres123
      ports:
         - "5432:5432"
      volumes:
         - postgres_data:/var/lib/postgresql/data
         - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD-SHELL", "pg_isready -U postgres"]
         interval: 10s
         timeout: 5s
         retries: 5

   # Redis Cache
   redis:
      image: redis:7-alpine
      container_name: ecommerce-redis
      restart: unless-stopped
      ports:
         - "6379:6379"
      volumes:
         - redis_data:/data
         - ./infrastructure/docker/redis/redis.conf:/etc/redis/redis.conf
      command: redis-server /etc/redis/redis.conf
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "redis-cli", "ping"]
         interval: 10s
         timeout: 5s
         retries: 3

   # RabbitMQ Message Queue
   rabbitmq:
      image: rabbitmq:3-management-alpine
      container_name: ecommerce-rabbitmq
      restart: unless-stopped
      environment:
         RABBITMQ_DEFAULT_USER: admin
         RABBITMQ_DEFAULT_PASS: admin123
      ports:
         - "5672:5672"
         - "15672:15672" # Management UI
      volumes:
         - rabbitmq_data:/var/lib/rabbitmq
      networks:
         - ecommerce-network
      healthcheck:
         test: rabbitmq-diagnostics -q ping
         interval: 30s
         timeout: 30s
         retries: 3

   # ================================
   # Microservices
   # ================================

   # API Gateway
   api-gateway:
      build:
         context: .
         dockerfile: services/api-gateway/Dockerfile
      container_name: ecommerce-api-gateway
      restart: unless-stopped
      ports:
         - "8080:8080"
      environment:
         - PORT=8080
         - USER_SERVICE_URL=http://user-service:8081
         - PRODUCT_SERVICE_URL=http://product-service:8082
         - ORDER_SERVICE_URL=http://order-service:8083
         - PAYMENT_SERVICE_URL=http://payment-service:8084
         - INVENTORY_SERVICE_URL=http://inventory-service:8085
         - NOTIFICATION_SERVICE_URL=http://notification-service:8086
         - JWT_SECRET=your-super-secret-jwt-key-change-in-production
         - REDIS_URL=redis://redis:6379
      depends_on:
         redis:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
         interval: 30s
         timeout: 10s
         retries: 3

   # User Service
   user-service:
      build:
         context: .
         dockerfile: services/user-service/Dockerfile
      container_name: ecommerce-user-service
      restart: unless-stopped
      ports:
         - "8081:8081"
      environment:
         - PORT=8081
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=users_db
         - JWT_SECRET=your-super-secret-jwt-key-change-in-production
         - REDIS_URL=redis://redis:6379
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
         interval: 30s
         timeout: 10s
         retries: 3

   # Product Service
   product-service:
      build:
         context: .
         dockerfile: services/product-service/Dockerfile
      container_name: ecommerce-product-service
      restart: unless-stopped
      ports:
         - "8082:8082"
      environment:
         - PORT=8082
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=products_db
         - REDIS_URL=redis://redis:6379
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
         interval: 30s
         timeout: 10s
         retries: 3

   # Order Service
   order-service:
      build:
         context: .
         dockerfile: services/order-service/Dockerfile
      container_name: ecommerce-order-service
      restart: unless-stopped
      ports:
         - "8083:8083"
      environment:
         - PORT=8083
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=orders_db
         - REDIS_URL=redis://redis:6379
         - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
         - USER_SERVICE_URL=http://user-service:8081
         - PRODUCT_SERVICE_URL=http://product-service:8082
         - INVENTORY_SERVICE_URL=http://inventory-service:8085
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
         interval: 30s
         timeout: 10s
         retries: 3

   # Payment Service
   payment-service:
      build:
         context: .
         dockerfile: services/payment-service/Dockerfile
      container_name: ecommerce-payment-service
      restart: unless-stopped
      ports:
         - "8084:8084"
      environment:
         - PORT=8084
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=payments_db
         - REDIS_URL=redis://redis:6379
         - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
         - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
         - STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
         interval: 30s
         timeout: 10s
         retries: 3

   # Inventory Service
   inventory-service:
      build:
         context: .
         dockerfile: services/inventory-service/Dockerfile
      container_name: ecommerce-inventory-service
      restart: unless-stopped
      ports:
         - "8085:8085"
      environment:
         - PORT=8085
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=inventory_db
         - REDIS_URL=redis://redis:6379
         - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
         interval: 30s
         timeout: 10s
         retries: 3

   # Notification Service
   notification-service:
      build:
         context: .
         dockerfile: services/notification-service/Dockerfile
      container_name: ecommerce-notification-service
      restart: unless-stopped
      ports:
         - "8086:8086"
      environment:
         - PORT=8086
         - DB_HOST=postgres
         - DB_PORT=5432
         - DB_USER=postgres
         - DB_PASSWORD=postgres123
         - DB_NAME=notifications_db
         - REDIS_URL=redis://redis:6379
         - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
         - SMTP_HOST=smtp.gmail.com
         - SMTP_PORT=587
         - SMTP_USER=your-email@gmail.com
         - SMTP_PASSWORD=your-app-password
         - TWILIO_ACCOUNT_SID=your-twilio-account-sid
         - TWILIO_AUTH_TOKEN=your-twilio-auth-token
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         rabbitmq:
            condition: service_healthy
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
         interval: 30s
         timeout: 10s
         retries: 3

   # ================================
   # Monitoring & Observability
   # ================================

   # Prometheus
   prometheus:
      image: prom/prometheus:latest
      container_name: ecommerce-prometheus
      restart: unless-stopped
      ports:
         - "9090:9090"
      volumes:
         - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
         - prometheus_data:/prometheus
      command:
         - "--config.file=/etc/prometheus/prometheus.yml"
         - "--storage.tsdb.path=/prometheus"
         - "--web.console.libraries=/etc/prometheus/console_libraries"
         - "--web.console.templates=/etc/prometheus/consoles"
         - "--storage.tsdb.retention.time=200h"
         - "--web.enable-lifecycle"
      networks:
         - ecommerce-network

   # Grafana
   grafana:
      image: grafana/grafana:latest
      container_name: ecommerce-grafana
      restart: unless-stopped
      ports:
         - "3000:3000"
      environment:
         - GF_SECURITY_ADMIN_USER=admin
         - GF_SECURITY_ADMIN_PASSWORD=admin123
         - GF_USERS_ALLOW_SIGN_UP=false
      volumes:
         - grafana_data:/var/lib/grafana
         - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      depends_on:
         - prometheus
      networks:
         - ecommerce-network

   # Jaeger (Distributed Tracing)
   jaeger:
      image: jaegertracing/all-in-one:latest
      container_name: ecommerce-jaeger
      restart: unless-stopped
      ports:
         - "16686:16686"
         - "14268:14268"
      environment:
         - COLLECTOR_OTLP_ENABLED=true
      networks:
         - ecommerce-network

   # ================================
   # Load Balancer (Optional)
   # ================================

   # Nginx Load Balancer
   nginx:
      image: nginx:alpine
      container_name: ecommerce-nginx
      restart: unless-stopped
      ports:
         - "80:80"
         - "443:443"
      volumes:
         - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
         - ./infrastructure/docker/nginx/ssl:/etc/nginx/ssl
      depends_on:
         - api-gateway
      networks:
         - ecommerce-network

# ================================
# Networks & Volumes
# ================================

networks:
   ecommerce-network:
      driver: bridge

volumes:
   postgres_data:
      driver: local
   redis_data:
      driver: local
   rabbitmq_data:
      driver: local
   prometheus_data:
      driver: local
   grafana_data:
      driver: local
