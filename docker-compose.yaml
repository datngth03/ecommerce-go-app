# version: "3.8" # Phiên bản Docker Compose - Đã được loại bỏ vì obsolete

services:
   # Dịch vụ PostgreSQL cho User, Product, Order, Payment, Shipping, Notification, Inventory, Review Services
   core_db:
      image: postgres:16-alpine # Sử dụng image PostgreSQL phiên bản 16 (phiên bản alpine nhỏ gọn)
      container_name: ecommerce_core_db_container # Tên container
      environment: # Các biến môi trường để cấu hình PostgreSQL
         POSTGRES_DB: ecommerce_core_db # Tên cơ sở dữ liệu
         POSTGRES_USER: user # Tên người dùng
         POSTGRES_PASSWORD: password # Mật khẩu
         # PGDATA không cần thiết nếu bạn mount volume vào /var/lib/postgresql/data (thư mục mặc định của Postgres)
      ports:
         - "5432:5432" # Ánh xạ cổng 5432 của container ra cổng 5432 của host
      volumes:
         # Mount volume dữ liệu vào thư mục mặc định của PostgreSQL
         - ecommerce_db_data:/var/lib/postgresql/data
         # Correct path for pg_hba.conf in postgres:alpine images is usually inside PGDATA
         # Đường dẫn đúng cho pg_hba.conf trong image postgres:alpine thường nằm trong thư mục PGDATA
         - ./docker/postgres/core_db/pg_hba.conf:/etc/postgresql/pg_hba.conf
      healthcheck: # Kiểm tra sức khỏe của DB
         test: ["CMD-SHELL", "pg_isready -U user -d ecommerce_core_db"]
         interval: 5s
         timeout: 5s
         retries: 5
      restart: always # Luôn khởi động lại container nếu có sự cố
      # Thêm dòng command này để buộc Postgres sử dụng mã hóa mật khẩu MD5
      # Điều này giải quyết vấn đề khi mật khẩu mặc định được lưu dưới dạng SCRAM

   # Dịch vụ Redis cho Cart Service và Auth Service (Refresh Tokens)
   redis:
      image: redis:7-alpine # Sử dụng image Redis phiên bản 7 (phiên bản alpine nhỏ gọn)
      container_name: ecommerce_redis # Tên container
      ports:
         - "6379:6379" # Ánh xạ cổng 6379 của container ra cổng 6379 của host
      volumes:
         - redis_data:/data # Lưu trữ dữ liệu vào volume (đây là đường dẫn mặc định của Redis)
      healthcheck: # Kiểm tra sức khỏe của Redis
         test: ["CMD", "redis-cli", "ping"]
         interval: 5s
         timeout: 5s
         retries: 5
      restart: always # Luôn khởi động lại container nếu có sự cố

   # Dịch vụ Elasticsearch cho Search Service
   elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0 # Sử dụng phiên bản Elasticsearch 8.14.0
      container_name: ecommerce_elasticsearch
      environment:
         - xpack.security.enabled=false # Tắt bảo mật X-Pack (KHÔNG DÙNG TRONG PRODUCTION)
         - discovery.type=single-node # Chạy ở chế độ một node (dev/test)
         - ES_JAVA_OPTS=-Xms512m -Xmx512m # Cấu hình bộ nhớ Java (điều chỉnh nếu cần)
      ports:
         - "9200:9200" # Cổng HTTP
         - "9300:9300" # Cổng Transport (nội bộ, cho client Java/Node.js)
      volumes:
         - elasticsearch_data:/usr/share/elasticsearch/data # Volume dữ liệu Elasticsearch
      healthcheck:
         test: ["CMD-SHELL", "curl -f http://localhost:9200"] # Kiểm tra cổng HTTP
         interval: 10s
         timeout: 10s
         retries: 5
      restart: always

   # THÊM: Dịch vụ Zookeeper cho Kafka
   zookeeper:
      image: confluentinc/cp-zookeeper:7.6.0
      container_name: ecommerce_zookeeper
      ports:
         - "2181:2181"
      environment:
         ZOOKEEPER_CLIENT_PORT: 2181
         ZOOKEEPER_TICK_TIME: 2000
      restart: always

   # THÊM: Dịch vụ Kafka
   kafka:
      image: confluentinc/cp-kafka:7.6.0
      container_name: ecommerce_kafka
      ports:
         - "9092:9092" # Cổng lắng nghe client
      environment:
         KAFKA_BROKER_ID: 1
         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Kết nối đến Zookeeper container
         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
         KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
         KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
         KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      depends_on:
         - zookeeper # Kafka phụ thuộc vào Zookeeper
      restart: always
   # THÊM: Dịch vụ Prometheus (thu thập metrics)
   prometheus:
      image: prom/prometheus:v2.52.0
      container_name: ecommerce_prometheus
      ports:
         - "9090:9090" # Cổng Prometheus UI
      volumes:
         - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # Mount file cấu hình
      command: --config.file=/etc/prometheus/prometheus.yml --web.enable-remote-write-receiver --storage.tsdb.retention.time=15d # Giữ dữ liệu 15 ngày
      depends_on:
         - core_db # Prometheus cần các service để scrape
         - redis
         - elasticsearch
         - kafka
      restart: always

   # THÊM: Dịch vụ Grafana (trực quan hóa metrics)
   grafana:
      image: grafana/grafana:10.4.3
      container_name: ecommerce_grafana
      ports:
         - "3000:3000" # Cổng Grafana UI
      volumes:
         - grafana_data:/var/lib/grafana # Volume lưu trữ dữ liệu Grafana (dashboard, datasource)
         - ./docker/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml # Cấu hình datasource
      environment:
         - GF_SECURITY_ADMIN_USER=admin
         - GF_SECURITY_ADMIN_PASSWORD=admin # Mật khẩu admin mặc định (ĐỔI TRONG PRODUCTION!)
      depends_on:
         - prometheus # Grafana cần Prometheus làm nguồn dữ liệu
      restart: always

   # THÊM: Dịch vụ Jaeger (theo dõi phân tán - tracing)
   jaeger:
      image: jaegertracing/all-in-one:1.56
      container_name: ecommerce_jaeger
      ports:
         - "6831:6831/udp" # Agent UDP Thrift
         - "16686:16686" # Jaeger UI
         - "14268:14268" # Collector HTTP Thrift
         - "14250:14250" # Collector gRPC
      environment:
         - COLLECTOR_ZIPKIN_HOST_PORT=9411
         - COLLECTOR_OTLP_ENABLED=true # Enable OpenTelemetry Protocol (OTLP)
      restart: always

volumes:
   ecommerce_db_data: # Định nghĩa volume cho PostgreSQL
   redis_data: # Định nghĩa volume cho Redis
   elasticsearch_data: # Định nghĩa volume cho Elasticsearch
   kafka_data: # THÊM: Định nghĩa volume cho Kafka (nếu cần lưu giữ dữ liệu Kafka)
   grafana_data: # THÊM: Định nghĩa volume cho Grafana

