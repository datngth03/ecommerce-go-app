// api/protobufs/payment.proto
syntax = "proto3";

// Define the package for protobuf
package payment;

// Go options:
// go_package specifies the import path for the generated Go package.
// It will create Go files in the "pkg/client/payment" directory.
option go_package = "github.com/datngth03/ecommerce-go-app/pkg/client/payment;payment_client";

// PaymentService defines the gRPC service for payment processing.
service PaymentService {
  // RPC to initiate a payment for an order
  rpc CreatePayment (CreatePaymentRequest) returns (PaymentResponse);

  // RPC to get payment details by ID
  rpc GetPaymentById (GetPaymentByIdRequest) returns (PaymentResponse);

  // RPC to confirm a payment (e.g., after a webhook from payment gateway)
  rpc ConfirmPayment (ConfirmPaymentRequest) returns (PaymentResponse);

  // RPC to refund a payment
  rpc RefundPayment (RefundPaymentRequest) returns (PaymentResponse);

  // RPC to list payments for a user or with filters
  rpc ListPayments (ListPaymentsRequest) returns (ListPaymentsResponse);
}

// Message for payment details
message Payment {
  string id = 1;
  string order_id = 2;
  string user_id = 3;
  double amount = 4;
  string currency = 5;
  string status = 6; // e.g., "pending", "completed", "failed", "refunded"
  string payment_method = 7; // e.g., "credit_card", "paypal", "bank_transfer"
  string transaction_id = 8; // ID from the payment gateway
  string created_at = 9; // ISO 8601 string
  string updated_at = 10; // ISO 8601 string
}

// Request to create a payment
message CreatePaymentRequest {
  string order_id = 1;
  string user_id = 2;
  double amount = 3;
  string currency = 4;
  string payment_method = 5;
  // In a real scenario, this might include card details or redirect URLs
}

// Response for payment operations
message PaymentResponse {
  Payment payment = 1;
}

// Request to get payment by ID
message GetPaymentByIdRequest {
  string id = 1;
}

// Request to confirm a payment
message ConfirmPaymentRequest {
  string payment_id = 1;
  string transaction_id = 2; // Transaction ID from gateway
  string status = 3; // Final status from gateway (e.g., "completed", "failed")
}

// Request to refund a payment
message RefundPaymentRequest {
  string payment_id = 1;
  double refund_amount = 2; // Optional: specify partial refund amount
}

// Request to list payments
message ListPaymentsRequest {
  string user_id = 1; // Optional filter by user ID
  string order_id = 2; // Optional filter by order ID
  string status = 3;  // Optional filter by status
  int32 limit = 4;    // Pagination limit
  int32 offset = 5;   // Pagination offset
}

// Response for listing payments
message ListPaymentsResponse {
  repeated Payment payments = 1;
  int32 total_count = 2; // Total number of payments matching criteria
}
