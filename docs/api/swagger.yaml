openapi: 3.0.3
info:
  title: E-Commerce Microservices API
  description: |-
    RESTful API for the E-Commerce platform built with Go microservices.
    
    ## Authentication
    All protected endpoints require a Bearer token obtained from the `/auth/login` endpoint.
    
    ## Rate Limiting
    API is rate-limited to 1000 requests per hour per IP address.
    
    ## Base URL
    Development: `http://localhost:8000/api/v1`
    
  version: 2.0.0
  contact:
    name: API Support
    email: support@ecommerce.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api.staging.ecommerce.com/api/v1
    description: Staging environment
  - url: https://api.ecommerce.com/api/v1
    description: Production environment

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile management
  - name: Products
    description: Product catalog operations
  - name: Inventory
    description: Stock and availability management
  - name: Orders
    description: Order processing and management
  - name: Cart
    description: Shopping cart operations
  - name: Payments
    description: Payment processing and methods

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Creates a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates user and returns JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generates new access token using refresh token
      operationId: refreshToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns authenticated user's profile information
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - Users
      summary: Update user profile
      description: Updates authenticated user's profile
      operationId: updateCurrentUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      tags:
        - Products
      summary: List products
      description: Returns paginated list of products
      operationId: listProducts
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: category_id
          in: query
          description: Filter by category UUID
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search by name or description
          schema:
            type: string
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      tags:
        - Products
      summary: Create product
      description: Creates a new product (Admin only)
      operationId: createProduct
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product details
      description: Returns detailed information about a specific product
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          description: Product UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - Products
      summary: Update product
      description: Updates product information (Admin only)
      operationId: updateProduct
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags:
        - Products
      summary: Delete product
      description: Soft deletes a product (Admin only)
      operationId: deleteProduct
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /inventory/{product_id}:
    get:
      tags:
        - Inventory
      summary: Get product stock
      description: Returns inventory information for a product
      operationId: getInventory
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          description: Product UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Inventory retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - Inventory
      summary: Update stock
      description: Updates product stock levels (Admin only)
      operationId: updateInventory
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          description: Product UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInventoryRequest'
      responses:
        '200':
          description: Inventory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /inventory/check-availability:
    post:
      tags:
        - Inventory
      summary: Check availability
      description: Checks if products are available in requested quantities
      operationId: checkAvailability
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckAvailabilityRequest'
      responses:
        '200':
          description: Availability checked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAvailabilityResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart:
    get:
      tags:
        - Cart
      summary: Get shopping cart
      description: Returns user's current shopping cart
      operationId: getCart
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      tags:
        - Cart
      summary: Add to cart
      description: Adds a product to the shopping cart
      operationId: addToCart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/{item_id}:
    put:
      tags:
        - Cart
      summary: Update cart item
      description: Updates quantity of an item in the cart
      operationId: updateCartItem
      security:
        - BearerAuth: []
      parameters:
        - name: item_id
          in: path
          required: true
          description: Cart item ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags:
        - Cart
      summary: Remove from cart
      description: Removes an item from the shopping cart
      operationId: removeFromCart
      security:
        - BearerAuth: []
      parameters:
        - name: item_id
          in: path
          required: true
          description: Cart item ID
          schema:
            type: string
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    get:
      tags:
        - Orders
      summary: List orders
      description: Returns user's order history
      operationId: listOrders
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
    
    post:
      tags:
        - Orders
      summary: Create order
      description: Creates an order from the user's cart
      operationId: createOrder
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid input or empty cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order details
      description: Returns detailed information about a specific order
      operationId: getOrder
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments:
    get:
      tags:
        - Payments
      summary: Payment history
      description: Returns user's payment history
      operationId: listPayments
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentListResponse'
    
    post:
      tags:
        - Payments
      summary: Process payment
      description: Initiates payment for an order
      operationId: createPayment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
      responses:
        '201':
          description: Payment initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/{id}:
    get:
      tags:
        - Payments
      summary: Get payment details
      description: Returns payment information
      operationId: getPayment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Payment UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/{id}/confirm:
    post:
      tags:
        - Payments
      summary: Confirm payment
      description: Confirms a payment transaction
      operationId: confirmPayment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Payment UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmPaymentRequest'
      responses:
        '200':
          description: Payment confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payment-methods:
    get:
      tags:
        - Payments
      summary: List payment methods
      description: Returns user's saved payment methods
      operationId: listPaymentMethods
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Payment methods retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodListResponse'
    
    post:
      tags:
        - Payments
      summary: Save payment method
      description: Stores a payment method for future use
      operationId: savePaymentMethod
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePaymentMethodRequest'
      responses:
        '201':
          description: Payment method saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payment-methods/{id}:
    delete:
      tags:
        - Payments
      summary: Delete payment method
      description: Removes a saved payment method
      operationId: deletePaymentMethod
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Payment method UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment method deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Payment method not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: SecurePass123!
        name:
          type: string
          minLength: 2
          example: John Doe
        phone:
          type: string
          example: "+1234567890"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: SecurePass123!

    LoginResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            access_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            refresh_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            expires_at:
              type: string
              format: date-time
              example: "2025-10-22T12:00:00Z"

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    RefreshTokenResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            access_token:
              type: string
            expires_at:
              type: string
              format: date-time

    # User Schemas
    UserResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 123
            email:
              type: string
              format: email
              example: user@example.com
            name:
              type: string
              example: John Doe
            phone:
              type: string
              example: "+1234567890"
            is_active:
              type: boolean
              example: true
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string

    # Product Schemas
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
        name:
          type: string
          example: Wireless Headphones
        slug:
          type: string
          example: wireless-headphones
        description:
          type: string
          example: Premium noise-canceling headphones
        price:
          type: number
          format: double
          example: 199.99
        category_id:
          type: string
          format: uuid
          example: 63b957bf-0f16-4f32-8c34-8215ccc5bc46
        image_url:
          type: string
          example: https://example.com/image.jpg
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Product'

    ProductListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CreateProductRequest:
      type: object
      required:
        - name
        - price
        - category_id
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        category_id:
          type: string
          format: uuid
        image_url:
          type: string

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        image_url:
          type: string

    # Inventory Schemas
    InventoryResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            product_id:
              type: string
              format: uuid
            available:
              type: integer
              example: 50
            reserved:
              type: integer
              example: 5
            total:
              type: integer
              example: 55
            warehouse_id:
              type: string
              example: default

    UpdateInventoryRequest:
      type: object
      required:
        - quantity
        - operation
      properties:
        quantity:
          type: integer
          minimum: 0
        operation:
          type: string
          enum: [add, subtract, set]

    CheckAvailabilityRequest:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - product_id
              - quantity
            properties:
              product_id:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1

    CheckAvailabilityResponse:
      type: object
      properties:
        available:
          type: boolean
          example: true
        message:
          type: string
          example: availability checked successfully
        unavailable_items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
                format: uuid
              requested:
                type: integer
              available:
                type: integer

    # Cart Schemas
    CartItem:
      type: object
      properties:
        id:
          type: string
          example: cart-item-1
        product_id:
          type: string
          format: uuid
        product_name:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: double
        subtotal:
          type: number
          format: double

    CartResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            user_id:
              type: integer
            items:
              type: array
              items:
                $ref: '#/components/schemas/CartItem'
            total:
              type: number
              format: double
            item_count:
              type: integer

    AddToCartRequest:
      type: object
      required:
        - product_id
        - quantity
      properties:
        product_id:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1

    UpdateCartItemRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 1

    # Order Schemas
    OrderItem:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        product_name:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: double
        subtotal:
          type: number
          format: double

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: integer
        status:
          type: string
          enum: [PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
        total_amount:
          type: number
          format: double
        shipping_address:
          type: string
        payment_method:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Order'

    OrderListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CreateOrderRequest:
      type: object
      required:
        - shipping_address
        - payment_method
      properties:
        shipping_address:
          type: string
          example: 123 Main St, San Francisco, CA 94105
        payment_method:
          type: string
          example: stripe

    # Payment Schemas
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        amount:
          type: number
          format: double
        currency:
          type: string
          example: USD
        method:
          type: string
          example: stripe
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED, REFUNDED]
        gateway_transaction_id:
          type: string
        created_at:
          type: string
          format: date-time

    PaymentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Payment'

    PaymentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CreatePaymentRequest:
      type: object
      required:
        - order_id
        - amount
        - method
      properties:
        order_id:
          type: string
          format: uuid
        amount:
          type: number
          format: double
        method:
          type: string
        currency:
          type: string
          default: USD

    ConfirmPaymentRequest:
      type: object
      required:
        - payment_intent_id
      properties:
        payment_intent_id:
          type: string

    PaymentMethod:
      type: object
      properties:
        id:
          type: string
          format: uuid
        method_type:
          type: string
          example: card
        gateway_method_id:
          type: string
          example: pm_stripe_visa4242
        is_default:
          type: boolean
        created_at:
          type: string
          format: date-time

    PaymentMethodListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'

    SavePaymentMethodRequest:
      type: object
      required:
        - method_type
        - gateway_method_id
      properties:
        method_type:
          type: string
        gateway_method_id:
          type: string
        is_default:
          type: boolean
          default: false

    # Common Schemas
    SuccessResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: boolean
              example: true
            message:
              type: string
              example: Operation completed successfully

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Error message description

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        total:
          type: integer
          example: 150
        total_pages:
          type: integer
          example: 15
