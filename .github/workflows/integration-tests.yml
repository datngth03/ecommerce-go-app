name: Integration Tests

on:
    schedule:
        # Run every day at 2 AM UTC
        - cron: "0 2 * * *"
    workflow_dispatch:
    push:
        branches: [main, develop]
        paths:
            - "services/**"
            - "tests/integration/**"

env:
    GO_VERSION: "1.24"

jobs:
    integration-tests:
        name: Run Integration Tests
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres123
                    POSTGRES_DB: test_db
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd "pg_isready -U postgres"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis:7-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            rabbitmq:
                image: rabbitmq:3-management-alpine
                ports:
                    - 5672:5672
                    - 15672:15672
                env:
                    RABBITMQ_DEFAULT_USER: guest
                    RABBITMQ_DEFAULT_PASS: guest
                options: >-
                    --health-cmd "rabbitmq-diagnostics -q ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Create test databases
              env:
                  PGPASSWORD: postgres123
              run: |
                  psql -h localhost -U postgres -c "CREATE DATABASE users_db;"
                  psql -h localhost -U postgres -c "CREATE DATABASE products_db;"
                  psql -h localhost -U postgres -c "CREATE DATABASE orders_db;"
                  psql -h localhost -U postgres -c "CREATE DATABASE payments_db;"
                  psql -h localhost -U postgres -c "CREATE DATABASE inventory_db;"
                  psql -h localhost -U postgres -c "CREATE DATABASE notifications_db;"

            - name: Run database migrations
              working-directory: tests/integration
              run: |
                  # Install golang-migrate
                  go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

                  # Run migrations for each service
                  for service in user product order payment inventory notification; do
                    echo "Running migrations for ${service}-service..."
                    migrate -path ../../services/${service}-service/migrations \
                            -database "postgresql://postgres:postgres123@localhost:5432/${service}s_db?sslmode=disable" \
                            up
                  done

            - name: Build all services
              run: |
                  for service in api-gateway user-service product-service order-service payment-service inventory-service notification-service; do
                    echo "Building ${service}..."
                    cd services/${service}
                    go build -o ../../bin/${service} ./cmd/...
                    cd ../..
                  done

            - name: Start services in background
              run: |
                  # Export environment variables
                  export DB_HOST=localhost
                  export DB_PORT=5432
                  export DB_USER=postgres
                  export DB_PASSWORD=postgres123
                  export REDIS_HOST=localhost
                  export REDIS_PORT=6379
                  export RABBITMQ_HOST=localhost
                  export RABBITMQ_PORT=5672

                  # Start each service in background
                  ./bin/user-service &
                  ./bin/product-service &
                  ./bin/order-service &
                  ./bin/payment-service &
                  ./bin/inventory-service &
                  ./bin/notification-service &
                  ./bin/api-gateway &

                  # Wait for services to be ready
                  sleep 10

            - name: Run integration tests
              working-directory: tests/integration
              env:
                  API_GATEWAY_URL: http://localhost:8000
                  USER_SERVICE_URL: http://localhost:8001
                  PRODUCT_SERVICE_URL: http://localhost:8002
                  ORDER_SERVICE_URL: http://localhost:8003
                  PAYMENT_SERVICE_URL: http://localhost:8005
                  INVENTORY_SERVICE_URL: http://localhost:8007
                  NOTIFICATION_SERVICE_URL: http://localhost:8004
              run: |
                  go test -v -race -timeout 30m ./...

            - name: Generate test report
              if: always()
              uses: dorny/test-reporter@v1
              with:
                  name: Integration Test Results
                  path: tests/integration/test-results.json
                  reporter: golang-json

            - name: Upload test artifacts
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: test-logs
                  path: |
                      *.log
                      tests/integration/*.log

    e2e-tests:
        name: End-to-End Tests
        runs-on: ubuntu-latest
        needs: integration-tests

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Compose
              run: |
                  docker-compose up -d
                  sleep 30

            - name: Wait for services to be healthy
              run: |
                  timeout 300 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'

            - name: Run E2E tests
              run: |
                  # Install k6 for load testing
                  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
                  echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
                  sudo apt-get update
                  sudo apt-get install k6

                  # Run load tests
                  k6 run tests/load/load-test.js

            - name: Check service metrics
              run: |
                  # Check Prometheus metrics endpoints
                  curl -f http://localhost:8001/metrics || exit 1
                  curl -f http://localhost:8002/metrics || exit 1
                  curl -f http://localhost:8003/metrics || exit 1
                  curl -f http://localhost:8004/metrics || exit 1
                  curl -f http://localhost:8005/metrics || exit 1
                  curl -f http://localhost:8007/metrics || exit 1

            - name: Collect service logs
              if: failure()
              run: |
                  docker-compose logs > e2e-test-logs.txt

            - name: Upload E2E test artifacts
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: e2e-test-logs
                  path: e2e-test-logs.txt

            - name: Cleanup
              if: always()
              run: |
                  docker-compose down -v

    performance-tests:
        name: Performance Tests
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Compose
              run: |
                  docker-compose up -d
                  sleep 30

            - name: Run performance benchmarks
              run: |
                  # Install k6
                  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
                  echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
                  sudo apt-get update
                  sudo apt-get install k6

                  # Run comprehensive load test
                  k6 run --out json=performance-results.json tests/load/load-test.js

            - name: Upload performance results
              uses: actions/upload-artifact@v4
              with:
                  name: performance-results
                  path: performance-results.json

            - name: Comment PR with results
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      const results = JSON.parse(fs.readFileSync('performance-results.json', 'utf8'));
                      const comment = `## Performance Test Results\n\nLatency: ${results.latency}\nThroughput: ${results.throughput}`;
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });

            - name: Cleanup
              if: always()
              run: |
                  docker-compose down -v
