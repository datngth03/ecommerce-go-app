# docker-compose.infrastructure.yaml

services:
   # PostgreSQL Service
   core_db:
      image: postgres:16-alpine
      container_name: ecommerce_core_db_container
      environment:
         POSTGRES_DB: ecommerce_core_db
         POSTGRES_USER: user
         POSTGRES_PASSWORD: password
      ports:
         - "5432:5432"
      volumes:
         - ecommerce_db_data:/var/lib/postgresql/data
      healthcheck:
         test: ["CMD-SHELL", "pg_isready -U user -d ecommerce_core_db"]
         interval: 5s
         timeout: 5s
         retries: 5
         start_period: 10s
      restart: always

   # Redis Service
   redis:
      image: redis:7-alpine
      container_name: ecommerce_redis
      ports:
         - "6379:6379"
      volumes:
         - redis_data:/data
      healthcheck:
         test: ["CMD", "redis-cli", "ping"]
         interval: 5s
         timeout: 5s
         retries: 5
      restart: always

   # Elasticsearch Service
   elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
      container_name: ecommerce_elasticsearch
      environment:
         - xpack.security.enabled=false
         - discovery.type=single-node
         - ES_JAVA_OPTS=-Xms512m -Xmx512m
      ports:
         - "9200:9200"
         - "9300:9300"
      volumes:
         - elasticsearch_data:/usr/share/elasticsearch/data
      healthcheck:
         test:
            [
               "CMD-SHELL",
               'curl -s http://localhost:9200/_cluster/health | grep -q ''"status":"green"''',
            ]
         interval: 10s
         timeout: 10s
         retries: 5
         start_period: 60s
      restart: always

   # Zookeeper Service for Kafka
   zookeeper:
      image: confluentinc/cp-zookeeper:7.6.0
      container_name: ecommerce_zookeeper
      ports:
         - "2181:2181"
      environment:
         ZOOKEEPER_CLIENT_PORT: 2181
         ZOOKEEPER_TICK_TIME: 2000
      restart: always

   # Kafka Service
   kafka:
      image: confluentinc/cp-kafka:7.6.0
      container_name: ecommerce_kafka
      ports:
         - "9092:9092"
      environment:
         KAFKA_BROKER_ID: 1
         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
         KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
         KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
         KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      depends_on:
         - zookeeper
      restart: always

   # Prometheus Service (metrics collection)
   prometheus:
      image: prom/prometheus:v2.52.0
      container_name: ecommerce_prometheus
      ports:
         - "9090:9090"
      volumes:
         - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      command: --config.file=/etc/prometheus/prometheus.yml --web.enable-remote-write-receiver --storage.tsdb.retention.time=15d
      depends_on:
         - core_db
         - redis
         - elasticsearch
         - kafka
      restart: always

   # Grafana Service (metrics visualization)
   grafana:
      image: grafana/grafana:10.4.3
      container_name: ecommerce_grafana
      ports:
         - "3000:3000"
      volumes:
         - grafana_data:/var/lib/grafana
         - ./docker/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      environment:
         - GF_SECURITY_ADMIN_USER=admin
         - GF_SECURITY_ADMIN_PASSWORD=admin
      depends_on:
         - prometheus
      restart: always

   # Jaeger Service (distributed tracing)
   jaeger:
      image: jaegertracing/all-in-one:1.56
      container_name: ecommerce_jaeger
      ports:
         - "6831:6831/udp"
         - "16686:16686"
         - "14268:14268"
         - "14250:14250"
      environment:
         - COLLECTOR_ZIPKIN_HOST_PORT=9411
         - COLLECTOR_OTLP_ENABLED=true
      restart: always

volumes:
   ecommerce_db_data:
   redis_data:
   elasticsearch_data:
   grafana_data:
