// api/protobufs/shipping.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: shipping.proto

// Define the package for protobuf

package shipping_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShippingService_CalculateShippingCost_FullMethodName = "/shipping.ShippingService/CalculateShippingCost"
	ShippingService_CreateShipment_FullMethodName        = "/shipping.ShippingService/CreateShipment"
	ShippingService_GetShipmentById_FullMethodName       = "/shipping.ShippingService/GetShipmentById"
	ShippingService_UpdateShipmentStatus_FullMethodName  = "/shipping.ShippingService/UpdateShipmentStatus"
	ShippingService_TrackShipment_FullMethodName         = "/shipping.ShippingService/TrackShipment"
	ShippingService_ListShipments_FullMethodName         = "/shipping.ShippingService/ListShipments"
)

// ShippingServiceClient is the client API for ShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ShippingService defines the gRPC service for shipping management.
type ShippingServiceClient interface {
	// RPC to calculate shipping cost for an order
	CalculateShippingCost(ctx context.Context, in *CalculateShippingCostRequest, opts ...grpc.CallOption) (*CalculateShippingCostResponse, error)
	// RPC to create a shipment for an order
	CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error)
	// RPC to get shipment details by ID
	GetShipmentById(ctx context.Context, in *GetShipmentByIdRequest, opts ...grpc.CallOption) (*ShipmentResponse, error)
	// RPC to update shipment status (e.g., from pending to in_transit/delivered)
	UpdateShipmentStatus(ctx context.Context, in *UpdateShipmentStatusRequest, opts ...grpc.CallOption) (*ShipmentResponse, error)
	// RPC to track a shipment (might involve calling third-party APIs)
	TrackShipment(ctx context.Context, in *TrackShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error)
	// RPC to list shipments for a user or with filters
	ListShipments(ctx context.Context, in *ListShipmentsRequest, opts ...grpc.CallOption) (*ListShipmentsResponse, error)
}

type shippingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingServiceClient(cc grpc.ClientConnInterface) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) CalculateShippingCost(ctx context.Context, in *CalculateShippingCostRequest, opts ...grpc.CallOption) (*CalculateShippingCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateShippingCostResponse)
	err := c.cc.Invoke(ctx, ShippingService_CalculateShippingCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentResponse)
	err := c.cc.Invoke(ctx, ShippingService_CreateShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) GetShipmentById(ctx context.Context, in *GetShipmentByIdRequest, opts ...grpc.CallOption) (*ShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentResponse)
	err := c.cc.Invoke(ctx, ShippingService_GetShipmentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) UpdateShipmentStatus(ctx context.Context, in *UpdateShipmentStatusRequest, opts ...grpc.CallOption) (*ShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentResponse)
	err := c.cc.Invoke(ctx, ShippingService_UpdateShipmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) TrackShipment(ctx context.Context, in *TrackShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentResponse)
	err := c.cc.Invoke(ctx, ShippingService_TrackShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) ListShipments(ctx context.Context, in *ListShipmentsRequest, opts ...grpc.CallOption) (*ListShipmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShipmentsResponse)
	err := c.cc.Invoke(ctx, ShippingService_ListShipments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingServiceServer is the server API for ShippingService service.
// All implementations must embed UnimplementedShippingServiceServer
// for forward compatibility.
//
// ShippingService defines the gRPC service for shipping management.
type ShippingServiceServer interface {
	// RPC to calculate shipping cost for an order
	CalculateShippingCost(context.Context, *CalculateShippingCostRequest) (*CalculateShippingCostResponse, error)
	// RPC to create a shipment for an order
	CreateShipment(context.Context, *CreateShipmentRequest) (*ShipmentResponse, error)
	// RPC to get shipment details by ID
	GetShipmentById(context.Context, *GetShipmentByIdRequest) (*ShipmentResponse, error)
	// RPC to update shipment status (e.g., from pending to in_transit/delivered)
	UpdateShipmentStatus(context.Context, *UpdateShipmentStatusRequest) (*ShipmentResponse, error)
	// RPC to track a shipment (might involve calling third-party APIs)
	TrackShipment(context.Context, *TrackShipmentRequest) (*ShipmentResponse, error)
	// RPC to list shipments for a user or with filters
	ListShipments(context.Context, *ListShipmentsRequest) (*ListShipmentsResponse, error)
	mustEmbedUnimplementedShippingServiceServer()
}

// UnimplementedShippingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShippingServiceServer struct{}

func (UnimplementedShippingServiceServer) CalculateShippingCost(context.Context, *CalculateShippingCostRequest) (*CalculateShippingCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateShippingCost not implemented")
}
func (UnimplementedShippingServiceServer) CreateShipment(context.Context, *CreateShipmentRequest) (*ShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipment not implemented")
}
func (UnimplementedShippingServiceServer) GetShipmentById(context.Context, *GetShipmentByIdRequest) (*ShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentById not implemented")
}
func (UnimplementedShippingServiceServer) UpdateShipmentStatus(context.Context, *UpdateShipmentStatusRequest) (*ShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShipmentStatus not implemented")
}
func (UnimplementedShippingServiceServer) TrackShipment(context.Context, *TrackShipmentRequest) (*ShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackShipment not implemented")
}
func (UnimplementedShippingServiceServer) ListShipments(context.Context, *ListShipmentsRequest) (*ListShipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipments not implemented")
}
func (UnimplementedShippingServiceServer) mustEmbedUnimplementedShippingServiceServer() {}
func (UnimplementedShippingServiceServer) testEmbeddedByValue()                         {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func RegisterShippingServiceServer(s grpc.ServiceRegistrar, srv ShippingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShippingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShippingService_ServiceDesc, srv)
}

func _ShippingService_CalculateShippingCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateShippingCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).CalculateShippingCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_CalculateShippingCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).CalculateShippingCost(ctx, req.(*CalculateShippingCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_CreateShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).CreateShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_CreateShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).CreateShipment(ctx, req.(*CreateShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_GetShipmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetShipmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_GetShipmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetShipmentById(ctx, req.(*GetShipmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_UpdateShipmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShipmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).UpdateShipmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_UpdateShipmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).UpdateShipmentStatus(ctx, req.(*UpdateShipmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_TrackShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).TrackShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_TrackShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).TrackShipment(ctx, req.(*TrackShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_ListShipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).ListShipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_ListShipments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).ListShipments(ctx, req.(*ListShipmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingService_ServiceDesc is the grpc.ServiceDesc for ShippingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shipping.ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateShippingCost",
			Handler:    _ShippingService_CalculateShippingCost_Handler,
		},
		{
			MethodName: "CreateShipment",
			Handler:    _ShippingService_CreateShipment_Handler,
		},
		{
			MethodName: "GetShipmentById",
			Handler:    _ShippingService_GetShipmentById_Handler,
		},
		{
			MethodName: "UpdateShipmentStatus",
			Handler:    _ShippingService_UpdateShipmentStatus_Handler,
		},
		{
			MethodName: "TrackShipment",
			Handler:    _ShippingService_TrackShipment_Handler,
		},
		{
			MethodName: "ListShipments",
			Handler:    _ShippingService_ListShipments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipping.proto",
}
