// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: product.proto

package productv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_CreateBrand_FullMethodName                  = "/product.v1.ProductService/CreateBrand"
	ProductService_GetBrand_FullMethodName                     = "/product.v1.ProductService/GetBrand"
	ProductService_UpdateBrand_FullMethodName                  = "/product.v1.ProductService/UpdateBrand"
	ProductService_DeleteBrand_FullMethodName                  = "/product.v1.ProductService/DeleteBrand"
	ProductService_ListBrands_FullMethodName                   = "/product.v1.ProductService/ListBrands"
	ProductService_CreateCategory_FullMethodName               = "/product.v1.ProductService/CreateCategory"
	ProductService_GetCategory_FullMethodName                  = "/product.v1.ProductService/GetCategory"
	ProductService_UpdateCategory_FullMethodName               = "/product.v1.ProductService/UpdateCategory"
	ProductService_DeleteCategory_FullMethodName               = "/product.v1.ProductService/DeleteCategory"
	ProductService_ListCategories_FullMethodName               = "/product.v1.ProductService/ListCategories"
	ProductService_CreateProduct_FullMethodName                = "/product.v1.ProductService/CreateProduct"
	ProductService_GetProduct_FullMethodName                   = "/product.v1.ProductService/GetProduct"
	ProductService_UpdateProduct_FullMethodName                = "/product.v1.ProductService/UpdateProduct"
	ProductService_DeleteProduct_FullMethodName                = "/product.v1.ProductService/DeleteProduct"
	ProductService_ListProducts_FullMethodName                 = "/product.v1.ProductService/ListProducts"
	ProductService_CreateProductVariant_FullMethodName         = "/product.v1.ProductService/CreateProductVariant"
	ProductService_GetProductVariant_FullMethodName            = "/product.v1.ProductService/GetProductVariant"
	ProductService_UpdateProductVariant_FullMethodName         = "/product.v1.ProductService/UpdateProductVariant"
	ProductService_DeleteProductVariant_FullMethodName         = "/product.v1.ProductService/DeleteProductVariant"
	ProductService_ListProductVariants_FullMethodName          = "/product.v1.ProductService/ListProductVariants"
	ProductService_CreateTag_FullMethodName                    = "/product.v1.ProductService/CreateTag"
	ProductService_GetTag_FullMethodName                       = "/product.v1.ProductService/GetTag"
	ProductService_UpdateTag_FullMethodName                    = "/product.v1.ProductService/UpdateTag"
	ProductService_DeleteTag_FullMethodName                    = "/product.v1.ProductService/DeleteTag"
	ProductService_ListTags_FullMethodName                     = "/product.v1.ProductService/ListTags"
	ProductService_CreateSpecificationAttribute_FullMethodName = "/product.v1.ProductService/CreateSpecificationAttribute"
	ProductService_GetSpecificationAttribute_FullMethodName    = "/product.v1.ProductService/GetSpecificationAttribute"
	ProductService_UpdateSpecificationAttribute_FullMethodName = "/product.v1.ProductService/UpdateSpecificationAttribute"
	ProductService_DeleteSpecificationAttribute_FullMethodName = "/product.v1.ProductService/DeleteSpecificationAttribute"
	ProductService_ListSpecificationAttributes_FullMethodName  = "/product.v1.ProductService/ListSpecificationAttributes"
	ProductService_CreateVariantAttribute_FullMethodName       = "/product.v1.ProductService/CreateVariantAttribute"
	ProductService_GetVariantAttribute_FullMethodName          = "/product.v1.ProductService/GetVariantAttribute"
	ProductService_UpdateVariantAttribute_FullMethodName       = "/product.v1.ProductService/UpdateVariantAttribute"
	ProductService_DeleteVariantAttribute_FullMethodName       = "/product.v1.ProductService/DeleteVariantAttribute"
	ProductService_ListVariantAttributes_FullMethodName        = "/product.v1.ProductService/ListVariantAttributes"
	ProductService_CreateVariantAttributeValue_FullMethodName  = "/product.v1.ProductService/CreateVariantAttributeValue"
	ProductService_GetVariantAttributeValue_FullMethodName     = "/product.v1.ProductService/GetVariantAttributeValue"
	ProductService_UpdateVariantAttributeValue_FullMethodName  = "/product.v1.ProductService/UpdateVariantAttributeValue"
	ProductService_DeleteVariantAttributeValue_FullMethodName  = "/product.v1.ProductService/DeleteVariantAttributeValue"
	ProductService_ListVariantAttributeValues_FullMethodName   = "/product.v1.ProductService/ListVariantAttributeValues"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// Brand operations
	CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBrands(ctx context.Context, in *ListBrandsRequest, opts ...grpc.CallOption) (*ListBrandsResponse, error)
	// Category operations
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	// Product operations
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	// Product Variant operations
	CreateProductVariant(ctx context.Context, in *CreateProductVariantRequest, opts ...grpc.CallOption) (*ProductVariant, error)
	GetProductVariant(ctx context.Context, in *GetProductVariantRequest, opts ...grpc.CallOption) (*ProductVariant, error)
	UpdateProductVariant(ctx context.Context, in *UpdateProductVariantRequest, opts ...grpc.CallOption) (*ProductVariant, error)
	DeleteProductVariant(ctx context.Context, in *DeleteProductVariantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListProductVariants(ctx context.Context, in *ListProductVariantsRequest, opts ...grpc.CallOption) (*ListProductVariantsResponse, error)
	// Tag operations
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	// Specification Attribute operations
	CreateSpecificationAttribute(ctx context.Context, in *CreateSpecificationAttributeRequest, opts ...grpc.CallOption) (*SpecificationAttribute, error)
	GetSpecificationAttribute(ctx context.Context, in *GetSpecificationAttributeRequest, opts ...grpc.CallOption) (*SpecificationAttribute, error)
	UpdateSpecificationAttribute(ctx context.Context, in *UpdateSpecificationAttributeRequest, opts ...grpc.CallOption) (*SpecificationAttribute, error)
	DeleteSpecificationAttribute(ctx context.Context, in *DeleteSpecificationAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSpecificationAttributes(ctx context.Context, in *ListSpecificationAttributesRequest, opts ...grpc.CallOption) (*ListSpecificationAttributesResponse, error)
	// Variant Attribute operations
	CreateVariantAttribute(ctx context.Context, in *CreateVariantAttributeRequest, opts ...grpc.CallOption) (*VariantAttribute, error)
	GetVariantAttribute(ctx context.Context, in *GetVariantAttributeRequest, opts ...grpc.CallOption) (*VariantAttribute, error)
	UpdateVariantAttribute(ctx context.Context, in *UpdateVariantAttributeRequest, opts ...grpc.CallOption) (*VariantAttribute, error)
	DeleteVariantAttribute(ctx context.Context, in *DeleteVariantAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVariantAttributes(ctx context.Context, in *ListVariantAttributesRequest, opts ...grpc.CallOption) (*ListVariantAttributesResponse, error)
	// Variant Attribute Value operations
	CreateVariantAttributeValue(ctx context.Context, in *CreateVariantAttributeValueRequest, opts ...grpc.CallOption) (*VariantAttributeValue, error)
	GetVariantAttributeValue(ctx context.Context, in *GetVariantAttributeValueRequest, opts ...grpc.CallOption) (*VariantAttributeValue, error)
	UpdateVariantAttributeValue(ctx context.Context, in *UpdateVariantAttributeValueRequest, opts ...grpc.CallOption) (*VariantAttributeValue, error)
	DeleteVariantAttributeValue(ctx context.Context, in *DeleteVariantAttributeValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVariantAttributeValues(ctx context.Context, in *ListVariantAttributeValuesRequest, opts ...grpc.CallOption) (*ListVariantAttributeValuesResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brand)
	err := c.cc.Invoke(ctx, ProductService_CreateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brand)
	err := c.cc.Invoke(ctx, ProductService_GetBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brand)
	err := c.cc.Invoke(ctx, ProductService_UpdateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListBrands(ctx context.Context, in *ListBrandsRequest, opts ...grpc.CallOption) (*ListBrandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBrandsResponse)
	err := c.cc.Invoke(ctx, ProductService_ListBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, ProductService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, ProductService_GetCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, ProductService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, ProductService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProductVariant(ctx context.Context, in *CreateProductVariantRequest, opts ...grpc.CallOption) (*ProductVariant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductVariant)
	err := c.cc.Invoke(ctx, ProductService_CreateProductVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductVariant(ctx context.Context, in *GetProductVariantRequest, opts ...grpc.CallOption) (*ProductVariant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductVariant)
	err := c.cc.Invoke(ctx, ProductService_GetProductVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProductVariant(ctx context.Context, in *UpdateProductVariantRequest, opts ...grpc.CallOption) (*ProductVariant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductVariant)
	err := c.cc.Invoke(ctx, ProductService_UpdateProductVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProductVariant(ctx context.Context, in *DeleteProductVariantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteProductVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListProductVariants(ctx context.Context, in *ListProductVariantsRequest, opts ...grpc.CallOption) (*ListProductVariantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductVariantsResponse)
	err := c.cc.Invoke(ctx, ProductService_ListProductVariants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, ProductService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, ProductService_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, ProductService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, ProductService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateSpecificationAttribute(ctx context.Context, in *CreateSpecificationAttributeRequest, opts ...grpc.CallOption) (*SpecificationAttribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpecificationAttribute)
	err := c.cc.Invoke(ctx, ProductService_CreateSpecificationAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetSpecificationAttribute(ctx context.Context, in *GetSpecificationAttributeRequest, opts ...grpc.CallOption) (*SpecificationAttribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpecificationAttribute)
	err := c.cc.Invoke(ctx, ProductService_GetSpecificationAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateSpecificationAttribute(ctx context.Context, in *UpdateSpecificationAttributeRequest, opts ...grpc.CallOption) (*SpecificationAttribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpecificationAttribute)
	err := c.cc.Invoke(ctx, ProductService_UpdateSpecificationAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteSpecificationAttribute(ctx context.Context, in *DeleteSpecificationAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteSpecificationAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListSpecificationAttributes(ctx context.Context, in *ListSpecificationAttributesRequest, opts ...grpc.CallOption) (*ListSpecificationAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpecificationAttributesResponse)
	err := c.cc.Invoke(ctx, ProductService_ListSpecificationAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateVariantAttribute(ctx context.Context, in *CreateVariantAttributeRequest, opts ...grpc.CallOption) (*VariantAttribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantAttribute)
	err := c.cc.Invoke(ctx, ProductService_CreateVariantAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetVariantAttribute(ctx context.Context, in *GetVariantAttributeRequest, opts ...grpc.CallOption) (*VariantAttribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantAttribute)
	err := c.cc.Invoke(ctx, ProductService_GetVariantAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateVariantAttribute(ctx context.Context, in *UpdateVariantAttributeRequest, opts ...grpc.CallOption) (*VariantAttribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantAttribute)
	err := c.cc.Invoke(ctx, ProductService_UpdateVariantAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteVariantAttribute(ctx context.Context, in *DeleteVariantAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteVariantAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListVariantAttributes(ctx context.Context, in *ListVariantAttributesRequest, opts ...grpc.CallOption) (*ListVariantAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVariantAttributesResponse)
	err := c.cc.Invoke(ctx, ProductService_ListVariantAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateVariantAttributeValue(ctx context.Context, in *CreateVariantAttributeValueRequest, opts ...grpc.CallOption) (*VariantAttributeValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantAttributeValue)
	err := c.cc.Invoke(ctx, ProductService_CreateVariantAttributeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetVariantAttributeValue(ctx context.Context, in *GetVariantAttributeValueRequest, opts ...grpc.CallOption) (*VariantAttributeValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantAttributeValue)
	err := c.cc.Invoke(ctx, ProductService_GetVariantAttributeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateVariantAttributeValue(ctx context.Context, in *UpdateVariantAttributeValueRequest, opts ...grpc.CallOption) (*VariantAttributeValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantAttributeValue)
	err := c.cc.Invoke(ctx, ProductService_UpdateVariantAttributeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteVariantAttributeValue(ctx context.Context, in *DeleteVariantAttributeValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteVariantAttributeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListVariantAttributeValues(ctx context.Context, in *ListVariantAttributeValuesRequest, opts ...grpc.CallOption) (*ListVariantAttributeValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVariantAttributeValuesResponse)
	err := c.cc.Invoke(ctx, ProductService_ListVariantAttributeValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	// Brand operations
	CreateBrand(context.Context, *CreateBrandRequest) (*Brand, error)
	GetBrand(context.Context, *GetBrandRequest) (*Brand, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*Brand, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*emptypb.Empty, error)
	ListBrands(context.Context, *ListBrandsRequest) (*ListBrandsResponse, error)
	// Category operations
	CreateCategory(context.Context, *CreateCategoryRequest) (*Category, error)
	GetCategory(context.Context, *GetCategoryRequest) (*Category, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*Category, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*emptypb.Empty, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	// Product operations
	CreateProduct(context.Context, *CreateProductRequest) (*Product, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*Product, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	// Product Variant operations
	CreateProductVariant(context.Context, *CreateProductVariantRequest) (*ProductVariant, error)
	GetProductVariant(context.Context, *GetProductVariantRequest) (*ProductVariant, error)
	UpdateProductVariant(context.Context, *UpdateProductVariantRequest) (*ProductVariant, error)
	DeleteProductVariant(context.Context, *DeleteProductVariantRequest) (*emptypb.Empty, error)
	ListProductVariants(context.Context, *ListProductVariantsRequest) (*ListProductVariantsResponse, error)
	// Tag operations
	CreateTag(context.Context, *CreateTagRequest) (*Tag, error)
	GetTag(context.Context, *GetTagRequest) (*Tag, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*Tag, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*emptypb.Empty, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	// Specification Attribute operations
	CreateSpecificationAttribute(context.Context, *CreateSpecificationAttributeRequest) (*SpecificationAttribute, error)
	GetSpecificationAttribute(context.Context, *GetSpecificationAttributeRequest) (*SpecificationAttribute, error)
	UpdateSpecificationAttribute(context.Context, *UpdateSpecificationAttributeRequest) (*SpecificationAttribute, error)
	DeleteSpecificationAttribute(context.Context, *DeleteSpecificationAttributeRequest) (*emptypb.Empty, error)
	ListSpecificationAttributes(context.Context, *ListSpecificationAttributesRequest) (*ListSpecificationAttributesResponse, error)
	// Variant Attribute operations
	CreateVariantAttribute(context.Context, *CreateVariantAttributeRequest) (*VariantAttribute, error)
	GetVariantAttribute(context.Context, *GetVariantAttributeRequest) (*VariantAttribute, error)
	UpdateVariantAttribute(context.Context, *UpdateVariantAttributeRequest) (*VariantAttribute, error)
	DeleteVariantAttribute(context.Context, *DeleteVariantAttributeRequest) (*emptypb.Empty, error)
	ListVariantAttributes(context.Context, *ListVariantAttributesRequest) (*ListVariantAttributesResponse, error)
	// Variant Attribute Value operations
	CreateVariantAttributeValue(context.Context, *CreateVariantAttributeValueRequest) (*VariantAttributeValue, error)
	GetVariantAttributeValue(context.Context, *GetVariantAttributeValueRequest) (*VariantAttributeValue, error)
	UpdateVariantAttributeValue(context.Context, *UpdateVariantAttributeValueRequest) (*VariantAttributeValue, error)
	DeleteVariantAttributeValue(context.Context, *DeleteVariantAttributeValueRequest) (*emptypb.Empty, error)
	ListVariantAttributeValues(context.Context, *ListVariantAttributeValuesRequest) (*ListVariantAttributeValuesResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) CreateBrand(context.Context, *CreateBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedProductServiceServer) GetBrand(context.Context, *GetBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedProductServiceServer) UpdateBrand(context.Context, *UpdateBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductServiceServer) DeleteBrand(context.Context, *DeleteBrandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedProductServiceServer) ListBrands(context.Context, *ListBrandsRequest) (*ListBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrands not implemented")
}
func (UnimplementedProductServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductServiceServer) GetCategory(context.Context, *GetCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedProductServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductServiceServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductServiceServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) GetProduct(context.Context, *GetProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductServiceServer) CreateProductVariant(context.Context, *CreateProductVariantRequest) (*ProductVariant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductVariant not implemented")
}
func (UnimplementedProductServiceServer) GetProductVariant(context.Context, *GetProductVariantRequest) (*ProductVariant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductVariant not implemented")
}
func (UnimplementedProductServiceServer) UpdateProductVariant(context.Context, *UpdateProductVariantRequest) (*ProductVariant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductVariant not implemented")
}
func (UnimplementedProductServiceServer) DeleteProductVariant(context.Context, *DeleteProductVariantRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductVariant not implemented")
}
func (UnimplementedProductServiceServer) ListProductVariants(context.Context, *ListProductVariantsRequest) (*ListProductVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductVariants not implemented")
}
func (UnimplementedProductServiceServer) CreateTag(context.Context, *CreateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedProductServiceServer) GetTag(context.Context, *GetTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedProductServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedProductServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedProductServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedProductServiceServer) CreateSpecificationAttribute(context.Context, *CreateSpecificationAttributeRequest) (*SpecificationAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecificationAttribute not implemented")
}
func (UnimplementedProductServiceServer) GetSpecificationAttribute(context.Context, *GetSpecificationAttributeRequest) (*SpecificationAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificationAttribute not implemented")
}
func (UnimplementedProductServiceServer) UpdateSpecificationAttribute(context.Context, *UpdateSpecificationAttributeRequest) (*SpecificationAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecificationAttribute not implemented")
}
func (UnimplementedProductServiceServer) DeleteSpecificationAttribute(context.Context, *DeleteSpecificationAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecificationAttribute not implemented")
}
func (UnimplementedProductServiceServer) ListSpecificationAttributes(context.Context, *ListSpecificationAttributesRequest) (*ListSpecificationAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpecificationAttributes not implemented")
}
func (UnimplementedProductServiceServer) CreateVariantAttribute(context.Context, *CreateVariantAttributeRequest) (*VariantAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariantAttribute not implemented")
}
func (UnimplementedProductServiceServer) GetVariantAttribute(context.Context, *GetVariantAttributeRequest) (*VariantAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariantAttribute not implemented")
}
func (UnimplementedProductServiceServer) UpdateVariantAttribute(context.Context, *UpdateVariantAttributeRequest) (*VariantAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariantAttribute not implemented")
}
func (UnimplementedProductServiceServer) DeleteVariantAttribute(context.Context, *DeleteVariantAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariantAttribute not implemented")
}
func (UnimplementedProductServiceServer) ListVariantAttributes(context.Context, *ListVariantAttributesRequest) (*ListVariantAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariantAttributes not implemented")
}
func (UnimplementedProductServiceServer) CreateVariantAttributeValue(context.Context, *CreateVariantAttributeValueRequest) (*VariantAttributeValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariantAttributeValue not implemented")
}
func (UnimplementedProductServiceServer) GetVariantAttributeValue(context.Context, *GetVariantAttributeValueRequest) (*VariantAttributeValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariantAttributeValue not implemented")
}
func (UnimplementedProductServiceServer) UpdateVariantAttributeValue(context.Context, *UpdateVariantAttributeValueRequest) (*VariantAttributeValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariantAttributeValue not implemented")
}
func (UnimplementedProductServiceServer) DeleteVariantAttributeValue(context.Context, *DeleteVariantAttributeValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariantAttributeValue not implemented")
}
func (UnimplementedProductServiceServer) ListVariantAttributeValues(context.Context, *ListVariantAttributeValuesRequest) (*ListVariantAttributeValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariantAttributeValues not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateBrand(ctx, req.(*CreateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBrand(ctx, req.(*GetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteBrand(ctx, req.(*DeleteBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListBrands(ctx, req.(*ListBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProductVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProductVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProductVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProductVariant(ctx, req.(*CreateProductVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductVariant(ctx, req.(*GetProductVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProductVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProductVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateProductVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProductVariant(ctx, req.(*UpdateProductVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProductVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProductVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProductVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProductVariant(ctx, req.(*DeleteProductVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListProductVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProductVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListProductVariants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProductVariants(ctx, req.(*ListProductVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateSpecificationAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecificationAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateSpecificationAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateSpecificationAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateSpecificationAttribute(ctx, req.(*CreateSpecificationAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetSpecificationAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecificationAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetSpecificationAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetSpecificationAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetSpecificationAttribute(ctx, req.(*GetSpecificationAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateSpecificationAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecificationAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateSpecificationAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateSpecificationAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateSpecificationAttribute(ctx, req.(*UpdateSpecificationAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteSpecificationAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpecificationAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteSpecificationAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteSpecificationAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteSpecificationAttribute(ctx, req.(*DeleteSpecificationAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListSpecificationAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpecificationAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListSpecificationAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListSpecificationAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListSpecificationAttributes(ctx, req.(*ListSpecificationAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateVariantAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariantAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateVariantAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateVariantAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateVariantAttribute(ctx, req.(*CreateVariantAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetVariantAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariantAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetVariantAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetVariantAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetVariantAttribute(ctx, req.(*GetVariantAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateVariantAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariantAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateVariantAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateVariantAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateVariantAttribute(ctx, req.(*UpdateVariantAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteVariantAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariantAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteVariantAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteVariantAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteVariantAttribute(ctx, req.(*DeleteVariantAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListVariantAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariantAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListVariantAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListVariantAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListVariantAttributes(ctx, req.(*ListVariantAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateVariantAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariantAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateVariantAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateVariantAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateVariantAttributeValue(ctx, req.(*CreateVariantAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetVariantAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariantAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetVariantAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetVariantAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetVariantAttributeValue(ctx, req.(*GetVariantAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateVariantAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariantAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateVariantAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateVariantAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateVariantAttributeValue(ctx, req.(*UpdateVariantAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteVariantAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariantAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteVariantAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteVariantAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteVariantAttributeValue(ctx, req.(*DeleteVariantAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListVariantAttributeValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariantAttributeValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListVariantAttributeValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListVariantAttributeValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListVariantAttributeValues(ctx, req.(*ListVariantAttributeValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBrand",
			Handler:    _ProductService_CreateBrand_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _ProductService_GetBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _ProductService_UpdateBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _ProductService_DeleteBrand_Handler,
		},
		{
			MethodName: "ListBrands",
			Handler:    _ProductService_ListBrands_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _ProductService_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _ProductService_GetCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProductService_DeleteCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _ProductService_ListCategories_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _ProductService_ListProducts_Handler,
		},
		{
			MethodName: "CreateProductVariant",
			Handler:    _ProductService_CreateProductVariant_Handler,
		},
		{
			MethodName: "GetProductVariant",
			Handler:    _ProductService_GetProductVariant_Handler,
		},
		{
			MethodName: "UpdateProductVariant",
			Handler:    _ProductService_UpdateProductVariant_Handler,
		},
		{
			MethodName: "DeleteProductVariant",
			Handler:    _ProductService_DeleteProductVariant_Handler,
		},
		{
			MethodName: "ListProductVariants",
			Handler:    _ProductService_ListProductVariants_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ProductService_CreateTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _ProductService_GetTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ProductService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ProductService_DeleteTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _ProductService_ListTags_Handler,
		},
		{
			MethodName: "CreateSpecificationAttribute",
			Handler:    _ProductService_CreateSpecificationAttribute_Handler,
		},
		{
			MethodName: "GetSpecificationAttribute",
			Handler:    _ProductService_GetSpecificationAttribute_Handler,
		},
		{
			MethodName: "UpdateSpecificationAttribute",
			Handler:    _ProductService_UpdateSpecificationAttribute_Handler,
		},
		{
			MethodName: "DeleteSpecificationAttribute",
			Handler:    _ProductService_DeleteSpecificationAttribute_Handler,
		},
		{
			MethodName: "ListSpecificationAttributes",
			Handler:    _ProductService_ListSpecificationAttributes_Handler,
		},
		{
			MethodName: "CreateVariantAttribute",
			Handler:    _ProductService_CreateVariantAttribute_Handler,
		},
		{
			MethodName: "GetVariantAttribute",
			Handler:    _ProductService_GetVariantAttribute_Handler,
		},
		{
			MethodName: "UpdateVariantAttribute",
			Handler:    _ProductService_UpdateVariantAttribute_Handler,
		},
		{
			MethodName: "DeleteVariantAttribute",
			Handler:    _ProductService_DeleteVariantAttribute_Handler,
		},
		{
			MethodName: "ListVariantAttributes",
			Handler:    _ProductService_ListVariantAttributes_Handler,
		},
		{
			MethodName: "CreateVariantAttributeValue",
			Handler:    _ProductService_CreateVariantAttributeValue_Handler,
		},
		{
			MethodName: "GetVariantAttributeValue",
			Handler:    _ProductService_GetVariantAttributeValue_Handler,
		},
		{
			MethodName: "UpdateVariantAttributeValue",
			Handler:    _ProductService_UpdateVariantAttributeValue_Handler,
		},
		{
			MethodName: "DeleteVariantAttributeValue",
			Handler:    _ProductService_DeleteVariantAttributeValue_Handler,
		},
		{
			MethodName: "ListVariantAttributeValues",
			Handler:    _ProductService_ListVariantAttributeValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
